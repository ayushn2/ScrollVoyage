{
  "version": 3,
  "sources": ["../../suspend-react/dist/index.js"],
  "sourcesContent": ["function shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nconst globalCache = [];\n\nfunction query(fn, keys, preload = false, config = {}) {\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) return entry.response; // If the promise is still unresolved, throw\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    promise: // Execute the promise\n    fn(...keys) // When it resolves, store its value\n    .then(response => entry.response = response) // Remove the entry if a lifespan was given\n    .then(() => {\n      if (config.lifespan && config.lifespan > 0) {\n        setTimeout(() => {\n          const index = globalCache.indexOf(entry);\n          if (index !== -1) globalCache.splice(index, 1);\n        }, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n\n    if (entry) {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    }\n  }\n};\n\nexport { clear, peek, preload, suspend };\n"],
  "mappings": ";AAAA,SAAS,mBAAmB,MAAM,MAAM,QAAQ,CAAC,GAAG,MAAM,MAAM,GAAG;AACjE,MAAI,SAAS;AAAM,WAAO;AAC1B,MAAI,CAAC,QAAQ,CAAC;AAAM,WAAO;AAC3B,QAAM,MAAM,KAAK;AACjB,MAAI,KAAK,WAAW;AAAK,WAAO;AAEhC,WAAS,IAAI,GAAG,IAAI,KAAK;AAAK,QAAI,CAAC,MAAM,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAG,aAAO;AAEnE,SAAO;AACT;AAEA,IAAM,cAAc,CAAC;AAErB,SAAS,MAAM,IAAI,MAAMA,WAAU,OAAO,SAAS,CAAC,GAAG;AACrD,aAAWC,UAAS,aAAa;AAE/B,QAAI,mBAAmB,MAAMA,OAAM,MAAMA,OAAM,KAAK,GAAG;AAErD,UAAID;AAAS,eAAO;AAEpB,UAAI,OAAO,UAAU,eAAe,KAAKC,QAAO,OAAO;AAAG,cAAMA,OAAM;AAEtE,UAAI,OAAO,UAAU,eAAe,KAAKA,QAAO,UAAU;AAAG,eAAOA,OAAM;AAE1E,UAAI,CAACD;AAAS,cAAMC,OAAM;AAAA,IAC5B;AAAA,EACF;AAGA,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA,OAAO,OAAO;AAAA,IACd;AAAA;AAAA,MACA,GAAG,GAAG,IAAI,EACT,KAAK,cAAY,MAAM,WAAW,QAAQ,EAC1C,KAAK,MAAM;AACV,YAAI,OAAO,YAAY,OAAO,WAAW,GAAG;AAC1C,qBAAW,MAAM;AACf,kBAAM,QAAQ,YAAY,QAAQ,KAAK;AACvC,gBAAI,UAAU;AAAI,0BAAY,OAAO,OAAO,CAAC;AAAA,UAC/C,GAAG,OAAO,QAAQ;AAAA,QACpB;AAAA,MACF,CAAC,EACA,MAAM,WAAS,MAAM,QAAQ,KAAK;AAAA;AAAA,EACrC;AAEA,cAAY,KAAK,KAAK;AAEtB,MAAI,CAACD;AAAS,UAAM,MAAM;AAC1B,SAAO;AACT;AAEA,IAAM,UAAU,CAAC,IAAI,MAAM,WAAW,MAAM,IAAI,MAAM,OAAO,MAAM;AAEnE,IAAM,UAAU,CAAC,IAAI,MAAM,WAAW,KAAK,MAAM,IAAI,MAAM,MAAM,MAAM;AAEvE,IAAM,OAAO,UAAQ;AACnB,MAAI;AAEJ,UAAQ,oBAAoB,YAAY,KAAK,WAAS,mBAAmB,MAAM,MAAM,MAAM,MAAM,KAAK,CAAC,MAAM,OAAO,SAAS,kBAAkB;AACjJ;AAEA,IAAM,QAAQ,UAAQ;AACpB,MAAI,SAAS,UAAa,KAAK,WAAW;AAAG,gBAAY,OAAO,GAAG,YAAY,MAAM;AAAA,OAAO;AAC1F,UAAM,QAAQ,YAAY,KAAK,CAAAC,WAAS,mBAAmB,MAAMA,OAAM,MAAMA,OAAM,KAAK,CAAC;AAEzF,QAAI,OAAO;AACT,YAAM,QAAQ,YAAY,QAAQ,KAAK;AACvC,UAAI,UAAU;AAAI,oBAAY,OAAO,OAAO,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;",
  "names": ["preload", "entry"]
}
